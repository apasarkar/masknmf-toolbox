from one.api import ONE
import ibllib.pipes.dynamic_pipeline as dyn

"""
How data moves from raw --> bin:
Raw Data --> Tiff (decompresses first) --> bin file


"""

one = ONE()
print(f'Location of data: {one.cache_dir}')
print('temp')
eid = 'SP067/2025-06-03/001'

# Load experiment description (used to determine pipeline tasks)
one.load_dataset(eid, '_ibl_experiment.description.yaml', download_only=True)
# Make the preprocessing pipeline
dyn._get_trials_tasks = lambda *args, **kwargs: dict()  # ignore trials preprocessing
pipeline = dyn.make_pipeline(one.eid2path(eid), one=one)
task = pipeline.tasks['MesoscopePreprocess']  # suite2p preprocessing task
task.device_collection = 'raw_imaging_data_??'
# Re-run suite2p

## Comment from Miles: try commenting this out. If the location is remote, it re-downloads. But default is local.
# task.location = 'remote'

# overwrite=True ensures we don't simply use motion registered data
## overwrite: if overwrite False -- it will skip tiff extraction + registration and move straight to ROI detection
## do_registration is just to run moco
## ROI Detection 
## rename_files -- whether or not to write the suite2p ROI detection outputs to the ONE/Alf format (mpci etc.) 
status = task.run(check_hash=False, overwrite=True, do_registration=True, roidetect=True, keep_movie_raw=True, rename_files=True)
assert status == 0, 'task run failed'
files = sorted(task.session_path.glob('suite2p/plane*/data.bin'))
# task.cleanUp() # deletes unarchived tif files

exit()
# Other examples:
# 1. Set up task without running (i.e. downloads required raw data)
task.setUp(check_hash=False, overwrite=True)
# 2. Run full suite2p pipeline with motion correction and ROI detection
status = task.run(overwrite=True)
task.outputs  # files generated by the task
# 3. Run suite2p but keep the non-motion-registered bin files
status = task.run(overwrite=True, keep_movie_raw=True)
files = sorted(task.session_path.glob('suite2p/plane*/data_raw.bin'))
# 4. Delete compressed data 
for file in task.session_path.glob('raw_imaging_data_??/imaging.frames.tar.bz2'):
	file.unlink()
# 5. Run suite2p without renaming the output to ALF datasets
status = task.run(overwrite=True, rename_files=True)
print(task.outputs)
print(sorted(task.session_path.rglob('data.bin')))