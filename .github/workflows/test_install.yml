name: Install and Test

on:
  pull_request:
    branches: ['*']
  push:
    branches: [dev]
  workflow_dispatch:

jobs:
  uv-test:
    # if: github.event_name == 'push' ||
    #   (github.event_name == 'pull_request' &&
    #   contains(github.event.pull_request.title, 'ci'))
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
        os: [ubuntu-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: UV sync (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $env:GIT_LFS_SKIP_SMUDGE = "1"
          uv sync --all-extras
          uv run -m pytest tests

      - name: UV sync (Unix)
        if: runner.os != 'Windows'
        shell: bash
        env:
          GIT_LFS_SKIP_SMUDGE: 1
        run: |
          uv sync --all-extras
          uv run -m pytest tests
      # - run: GIT_LFS_SKIP_SMUDGE=1 uv sync --all-extras
      # - run: GIT_LFS_SKIP_SMUDGE=1 uv run -m pytest tests

  conda-test:
    # if: github.event_name == 'push' ||
    #     (github.event_name == 'pull_request' &&
    #      contains(github.event.pull_request.title, 'ci'))
    # runs-on: ubuntu-latest
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
        os: [ubuntu-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Miniforge3
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniforge-variant: Miniforge3
          miniforge-version: latest
          python-version: ${{ matrix.python-version }}
          activate-environment: masknmf
          channels: conda-forge

      - name: Install package & pytest
        shell: bash -l {0}
        run: |
          pip install . pytest

      - name: Run tests
        shell: bash -l {0}
        run: pytest tests
